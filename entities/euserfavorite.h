#ifndef EUSERFAVORITE_H
#define EUSERFAVORITE_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserFavorite
**/
class  EUserFavorite : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(qint64 otherUserID READ getOtherUserID WRITE setOtherUserID USER true)
	Q_PROPERTY(qint64 placeID READ getPlaceID WRITE setPlaceID USER true)
	Q_PROPERTY(QString name READ getName WRITE setName USER true)
	Q_PROPERTY(QString brief READ getBrief WRITE setBrief USER true)
	Q_PROPERTY(bool enabled READ getEnabled WRITE setEnabled USER true)
	Q_PROPERTY(qint32 visibility READ getVisibility WRITE setVisibility USER true)

public:
	Q_INVOKABLE EUserFavorite(QObject *parent=0);
	~EUserFavorite(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserFavorite(const EUserFavorite &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserFavorite &operator=(const EUserFavorite &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserFavorite &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserFavorite &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	inline qint64 getOtherUserID() const {return otherUserID;}
	void setOtherUserID(qint64 d){otherUserID=d;}
	inline qint64 getPlaceID() const {return placeID;}
	void setPlaceID(qint64 d){placeID=d;}
	Q_INVOKABLE QString getName() const {return name;}
	void setName(const QString &d){name=d;}
	Q_INVOKABLE QString getBrief() const {return brief;}
	void setBrief(const QString &d){brief=d;}
	inline bool getEnabled() const {return enabled;}
	void setEnabled(bool d){enabled=d;}
	inline qint32 getVisibility() const {return visibility;}
	void setVisibility(qint32 d){visibility=d;}

protected:
	EUserFavorite &setData(const EUserFavorite &d){
		id=d.id;
		userID=d.userID;
		otherUserID=d.otherUserID;
		placeID=d.placeID;
		name=d.name;
		brief=d.brief;
		enabled=d.enabled;
		visibility=d.visibility;
		return *this;
	}
	bool equal(const EUserFavorite &other) const {
		if(id!=other.id)return false;
		if(userID!=other.userID)return false;
		if(otherUserID!=other.otherUserID)return false;
		if(placeID!=other.placeID)return false;
		if(name!=other.name)return false;
		if(brief!=other.brief)return false;
		if(enabled!=other.enabled)return false;
		if(visibility!=other.visibility)return false;
		return true;
	}
	qint64 id;
	qint64 userID;
	qint64 otherUserID;
	qint64 placeID;
	QString name;
	QString brief;
	bool enabled;
	qint32 visibility;
};

Q_DECLARE_METATYPE(EUserFavorite)
Q_DECLARE_METATYPE(EUserFavorite*)
Q_DECLARE_METATYPE(QList<EUserFavorite*>)
Q_DECLARE_METATYPE(QList<EUserFavorite>)
#endif
