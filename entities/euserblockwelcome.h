#ifndef EUSERBLOCKWELCOME_H
#define EUSERBLOCKWELCOME_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserBlockWelcome
**/
class  EUserBlockWelcome : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(QString name READ getName WRITE setName USER true)
	Q_PROPERTY(qint32 nextBlockType READ getNextBlockType WRITE setNextBlockType USER true)
	Q_PROPERTY(qint64 nextBlockID READ getNextBlockID WRITE setNextBlockID USER true)
	Q_PROPERTY(QString brief READ getBrief WRITE setBrief USER true)
	Q_PROPERTY(QString description READ getDescription WRITE setDescription USER true)
	Q_PROPERTY(bool displayStatus READ getDisplayStatus WRITE setDisplayStatus USER true)
	Q_PROPERTY(QTime mondayStart READ getMondayStart WRITE setMondayStart USER true)
	Q_PROPERTY(QTime mondayEnd READ getMondayEnd WRITE setMondayEnd USER true)
	Q_PROPERTY(QTime tuesdayStart READ getTuesdayStart WRITE setTuesdayStart USER true)
	Q_PROPERTY(QTime tuesdayEnd READ getTuesdayEnd WRITE setTuesdayEnd USER true)
	Q_PROPERTY(QTime wednesdayStart READ getWednesdayStart WRITE setWednesdayStart USER true)
	Q_PROPERTY(QTime wednesdayEnd READ getWednesdayEnd WRITE setWednesdayEnd USER true)
	Q_PROPERTY(QTime thursdayStart READ getThursdayStart WRITE setThursdayStart USER true)
	Q_PROPERTY(QTime thursdayEnd READ getThursdayEnd WRITE setThursdayEnd USER true)
	Q_PROPERTY(QTime fridayStart READ getFridayStart WRITE setFridayStart USER true)
	Q_PROPERTY(QTime fridayEnd READ getFridayEnd WRITE setFridayEnd USER true)
	Q_PROPERTY(QTime saturdayStart READ getSaturdayStart WRITE setSaturdayStart USER true)
	Q_PROPERTY(QTime saturdayEnd READ getSaturdayEnd WRITE setSaturdayEnd USER true)
	Q_PROPERTY(QTime sundayStart READ getSundayStart WRITE setSundayStart USER true)
	Q_PROPERTY(QTime sundayEnd READ getSundayEnd WRITE setSundayEnd USER true)
	Q_PROPERTY(QTime holidayStart READ getHolidayStart WRITE setHolidayStart USER true)
	Q_PROPERTY(QTime holidayEnd READ getHolidayEnd WRITE setHolidayEnd USER true)
	Q_PROPERTY(QString userName READ getUserName WRITE setUserName USER true)
	Q_PROPERTY(bool isFavorite READ getIsFavorite WRITE setIsFavorite USER true)
	Q_PROPERTY(qint32 infoVisibility READ getInfoVisibility WRITE setInfoVisibility USER true)
	Q_PROPERTY(qint32 currentUserVisibility READ getCurrentUserVisibility WRITE setCurrentUserVisibility USER true)
	Q_PROPERTY(QString address READ getAddress WRITE setAddress USER true)
	Q_PROPERTY(QString postalCode READ getPostalCode WRITE setPostalCode USER true)
	Q_PROPERTY(QString phone1 READ getPhone1 WRITE setPhone1 USER true)
	Q_PROPERTY(QString phone2 READ getPhone2 WRITE setPhone2 USER true)
	Q_PROPERTY(QString phone3 READ getPhone3 WRITE setPhone3 USER true)
	Q_PROPERTY(QString neighborhood READ getNeighborhood WRITE setNeighborhood USER true)
	Q_PROPERTY(QString cityName READ getCityName WRITE setCityName USER true)
	Q_PROPERTY(qint32 cityRegionID READ getCityRegionID WRITE setCityRegionID USER true)
	Q_PROPERTY(QString webSite READ getWebSite WRITE setWebSite USER true)
	Q_PROPERTY(qint32 capacity READ getCapacity WRITE setCapacity USER true)
	Q_PROPERTY(QString structure READ getStructure WRITE setStructure USER true)

public:
	Q_INVOKABLE EUserBlockWelcome(QObject *parent=0);
	~EUserBlockWelcome(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserBlockWelcome(const EUserBlockWelcome &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserBlockWelcome &operator=(const EUserBlockWelcome &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserBlockWelcome &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserBlockWelcome &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	Q_INVOKABLE QString getName() const {return name;}
	void setName(const QString &d){name=d;}
	inline qint32 getNextBlockType() const {return nextBlockType;}
	void setNextBlockType(qint32 d){nextBlockType=d;}
	inline qint64 getNextBlockID() const {return nextBlockID;}
	void setNextBlockID(qint64 d){nextBlockID=d;}
	Q_INVOKABLE QString getBrief() const {return brief;}
	void setBrief(const QString &d){brief=d;}
	Q_INVOKABLE QString getDescription() const {return description;}
	void setDescription(const QString &d){description=d;}
	inline bool getDisplayStatus() const {return displayStatus;}
	void setDisplayStatus(bool d){displayStatus=d;}
	Q_INVOKABLE QTime getMondayStart() const {return mondayStart;}
	void setMondayStart(const QTime &d){mondayStart=d;}
	Q_INVOKABLE QTime getMondayEnd() const {return mondayEnd;}
	void setMondayEnd(const QTime &d){mondayEnd=d;}
	Q_INVOKABLE QTime getTuesdayStart() const {return tuesdayStart;}
	void setTuesdayStart(const QTime &d){tuesdayStart=d;}
	Q_INVOKABLE QTime getTuesdayEnd() const {return tuesdayEnd;}
	void setTuesdayEnd(const QTime &d){tuesdayEnd=d;}
	Q_INVOKABLE QTime getWednesdayStart() const {return wednesdayStart;}
	void setWednesdayStart(const QTime &d){wednesdayStart=d;}
	Q_INVOKABLE QTime getWednesdayEnd() const {return wednesdayEnd;}
	void setWednesdayEnd(const QTime &d){wednesdayEnd=d;}
	Q_INVOKABLE QTime getThursdayStart() const {return thursdayStart;}
	void setThursdayStart(const QTime &d){thursdayStart=d;}
	Q_INVOKABLE QTime getThursdayEnd() const {return thursdayEnd;}
	void setThursdayEnd(const QTime &d){thursdayEnd=d;}
	Q_INVOKABLE QTime getFridayStart() const {return fridayStart;}
	void setFridayStart(const QTime &d){fridayStart=d;}
	Q_INVOKABLE QTime getFridayEnd() const {return fridayEnd;}
	void setFridayEnd(const QTime &d){fridayEnd=d;}
	Q_INVOKABLE QTime getSaturdayStart() const {return saturdayStart;}
	void setSaturdayStart(const QTime &d){saturdayStart=d;}
	Q_INVOKABLE QTime getSaturdayEnd() const {return saturdayEnd;}
	void setSaturdayEnd(const QTime &d){saturdayEnd=d;}
	Q_INVOKABLE QTime getSundayStart() const {return sundayStart;}
	void setSundayStart(const QTime &d){sundayStart=d;}
	Q_INVOKABLE QTime getSundayEnd() const {return sundayEnd;}
	void setSundayEnd(const QTime &d){sundayEnd=d;}
	Q_INVOKABLE QTime getHolidayStart() const {return holidayStart;}
	void setHolidayStart(const QTime &d){holidayStart=d;}
	Q_INVOKABLE QTime getHolidayEnd() const {return holidayEnd;}
	void setHolidayEnd(const QTime &d){holidayEnd=d;}
	Q_INVOKABLE QString getUserName() const {return userName;}
	void setUserName(const QString &d){userName=d;}
	inline bool getIsFavorite() const {return isFavorite;}
	void setIsFavorite(bool d){isFavorite=d;}
	inline qint32 getInfoVisibility() const {return infoVisibility;}
	void setInfoVisibility(qint32 d){infoVisibility=d;}
	inline qint32 getCurrentUserVisibility() const {return currentUserVisibility;}
	void setCurrentUserVisibility(qint32 d){currentUserVisibility=d;}
	Q_INVOKABLE QString getAddress() const {return address;}
	void setAddress(const QString &d){address=d;}
	Q_INVOKABLE QString getPostalCode() const {return postalCode;}
	void setPostalCode(const QString &d){postalCode=d;}
	Q_INVOKABLE QString getPhone1() const {return phone1;}
	void setPhone1(const QString &d){phone1=d;}
	Q_INVOKABLE QString getPhone2() const {return phone2;}
	void setPhone2(const QString &d){phone2=d;}
	Q_INVOKABLE QString getPhone3() const {return phone3;}
	void setPhone3(const QString &d){phone3=d;}
	Q_INVOKABLE QString getNeighborhood() const {return neighborhood;}
	void setNeighborhood(const QString &d){neighborhood=d;}
	Q_INVOKABLE QString getCityName() const {return cityName;}
	void setCityName(const QString &d){cityName=d;}
	inline qint32 getCityRegionID() const {return cityRegionID;}
	void setCityRegionID(qint32 d){cityRegionID=d;}
	Q_INVOKABLE QString getWebSite() const {return webSite;}
	void setWebSite(const QString &d){webSite=d;}
	inline qint32 getCapacity() const {return capacity;}
	void setCapacity(qint32 d){capacity=d;}
	Q_INVOKABLE QString getStructure() const {return structure;}
	void setStructure(const QString &d){structure=d;}

protected:
	EUserBlockWelcome &setData(const EUserBlockWelcome &d){
		id=d.id;
		userID=d.userID;
		name=d.name;
		nextBlockType=d.nextBlockType;
		nextBlockID=d.nextBlockID;
		brief=d.brief;
		description=d.description;
		displayStatus=d.displayStatus;
		mondayStart=d.mondayStart;
		mondayEnd=d.mondayEnd;
		tuesdayStart=d.tuesdayStart;
		tuesdayEnd=d.tuesdayEnd;
		wednesdayStart=d.wednesdayStart;
		wednesdayEnd=d.wednesdayEnd;
		thursdayStart=d.thursdayStart;
		thursdayEnd=d.thursdayEnd;
		fridayStart=d.fridayStart;
		fridayEnd=d.fridayEnd;
		saturdayStart=d.saturdayStart;
		saturdayEnd=d.saturdayEnd;
		sundayStart=d.sundayStart;
		sundayEnd=d.sundayEnd;
		holidayStart=d.holidayStart;
		holidayEnd=d.holidayEnd;
		userName=d.userName;
		isFavorite=d.isFavorite;
		infoVisibility=d.infoVisibility;
		currentUserVisibility=d.currentUserVisibility;
		address=d.address;
		postalCode=d.postalCode;
		phone1=d.phone1;
		phone2=d.phone2;
		phone3=d.phone3;
		neighborhood=d.neighborhood;
		cityName=d.cityName;
		cityRegionID=d.cityRegionID;
		webSite=d.webSite;
		capacity=d.capacity;
		structure=d.structure;
		return *this;
	}
	bool equal(const EUserBlockWelcome &other) const {
		if(id!=other.id)return false;
		if(userID!=other.userID)return false;
		if(name!=other.name)return false;
		if(nextBlockType!=other.nextBlockType)return false;
		if(nextBlockID!=other.nextBlockID)return false;
		if(brief!=other.brief)return false;
		if(description!=other.description)return false;
		if(displayStatus!=other.displayStatus)return false;
		if(mondayStart!=other.mondayStart)return false;
		if(mondayEnd!=other.mondayEnd)return false;
		if(tuesdayStart!=other.tuesdayStart)return false;
		if(tuesdayEnd!=other.tuesdayEnd)return false;
		if(wednesdayStart!=other.wednesdayStart)return false;
		if(wednesdayEnd!=other.wednesdayEnd)return false;
		if(thursdayStart!=other.thursdayStart)return false;
		if(thursdayEnd!=other.thursdayEnd)return false;
		if(fridayStart!=other.fridayStart)return false;
		if(fridayEnd!=other.fridayEnd)return false;
		if(saturdayStart!=other.saturdayStart)return false;
		if(saturdayEnd!=other.saturdayEnd)return false;
		if(sundayStart!=other.sundayStart)return false;
		if(sundayEnd!=other.sundayEnd)return false;
		if(holidayStart!=other.holidayStart)return false;
		if(holidayEnd!=other.holidayEnd)return false;
		if(userName!=other.userName)return false;
		if(isFavorite!=other.isFavorite)return false;
		if(infoVisibility!=other.infoVisibility)return false;
		if(currentUserVisibility!=other.currentUserVisibility)return false;
		if(address!=other.address)return false;
		if(postalCode!=other.postalCode)return false;
		if(phone1!=other.phone1)return false;
		if(phone2!=other.phone2)return false;
		if(phone3!=other.phone3)return false;
		if(neighborhood!=other.neighborhood)return false;
		if(cityName!=other.cityName)return false;
		if(cityRegionID!=other.cityRegionID)return false;
		if(webSite!=other.webSite)return false;
		if(capacity!=other.capacity)return false;
		if(structure!=other.structure)return false;
		return true;
	}
	qint64 id;
	qint64 userID;
	QString name;
	qint32 nextBlockType;
	qint64 nextBlockID;
	QString brief;
	QString description;
	bool displayStatus;
	QTime mondayStart;
	QTime mondayEnd;
	QTime tuesdayStart;
	QTime tuesdayEnd;
	QTime wednesdayStart;
	QTime wednesdayEnd;
	QTime thursdayStart;
	QTime thursdayEnd;
	QTime fridayStart;
	QTime fridayEnd;
	QTime saturdayStart;
	QTime saturdayEnd;
	QTime sundayStart;
	QTime sundayEnd;
	QTime holidayStart;
	QTime holidayEnd;
	QString userName;
	bool isFavorite;
	qint32 infoVisibility;
	qint32 currentUserVisibility;
	QString address;
	QString postalCode;
	QString phone1;
	QString phone2;
	QString phone3;
	QString neighborhood;
	QString cityName;
	qint32 cityRegionID;
	QString webSite;
	qint32 capacity;
	QString structure;
};

Q_DECLARE_METATYPE(EUserBlockWelcome)
Q_DECLARE_METATYPE(EUserBlockWelcome*)
Q_DECLARE_METATYPE(QList<EUserBlockWelcome*>)
Q_DECLARE_METATYPE(QList<EUserBlockWelcome>)
#endif
