#ifndef EMOBILECOUNTS_H
#define EMOBILECOUNTS_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EMobileCounts
**/
class  EMobileCounts : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint32 unreadMsgCount READ getUnreadMsgCount WRITE setUnreadMsgCount USER true)
	Q_PROPERTY(qint32 unreadNewsCount READ getUnreadNewsCount WRITE setUnreadNewsCount USER true)
	Q_PROPERTY(qint32 unreadQualificationsCount READ getUnreadQualificationsCount WRITE setUnreadQualificationsCount USER true)
	Q_PROPERTY(bool containsMngBlocks READ getContainsMngBlocks WRITE setContainsMngBlocks USER true)

public:
	Q_INVOKABLE EMobileCounts(QObject *parent=0);
	~EMobileCounts(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EMobileCounts(const EMobileCounts &d) : QObject () { setData(d); }
	Q_INVOKABLE EMobileCounts &operator=(const EMobileCounts &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EMobileCounts &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EMobileCounts &other) const{ if(equal(other))return false;return true;}
	inline qint32 getUnreadMsgCount() const {return unreadMsgCount;}
	void setUnreadMsgCount(qint32 d){unreadMsgCount=d;}
	inline qint32 getUnreadNewsCount() const {return unreadNewsCount;}
	void setUnreadNewsCount(qint32 d){unreadNewsCount=d;}
	inline qint32 getUnreadQualificationsCount() const {return unreadQualificationsCount;}
	void setUnreadQualificationsCount(qint32 d){unreadQualificationsCount=d;}
	inline bool getContainsMngBlocks() const {return containsMngBlocks;}
	void setContainsMngBlocks(bool d){containsMngBlocks=d;}

protected:
	EMobileCounts &setData(const EMobileCounts &d){
		unreadMsgCount=d.unreadMsgCount;
		unreadNewsCount=d.unreadNewsCount;
		unreadQualificationsCount=d.unreadQualificationsCount;
		containsMngBlocks=d.containsMngBlocks;
		return *this;
	}
	bool equal(const EMobileCounts &other) const {
		if(unreadMsgCount!=other.unreadMsgCount)return false;
		if(unreadNewsCount!=other.unreadNewsCount)return false;
		if(unreadQualificationsCount!=other.unreadQualificationsCount)return false;
		if(containsMngBlocks!=other.containsMngBlocks)return false;
		return true;
	}
	qint32 unreadMsgCount;
	qint32 unreadNewsCount;
	qint32 unreadQualificationsCount;
	bool containsMngBlocks;
};

Q_DECLARE_METATYPE(EMobileCounts)
Q_DECLARE_METATYPE(EMobileCounts*)
Q_DECLARE_METATYPE(QList<EMobileCounts*>)
Q_DECLARE_METATYPE(QList<EMobileCounts>)
#endif
