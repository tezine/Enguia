#ifndef EFUNVIEW_H
#define EFUNVIEW_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EFunView
**/
class  EFunView : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(qint64 funID READ getFunID WRITE setFunID USER true)

public:
	Q_INVOKABLE EFunView(QObject *parent=0);
	~EFunView(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EFunView(const EFunView &d) : QObject () { setData(d); }
	Q_INVOKABLE EFunView &operator=(const EFunView &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EFunView &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EFunView &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	inline qint64 getFunID() const {return funID;}
	void setFunID(qint64 d){funID=d;}

protected:
	EFunView &setData(const EFunView &d){
		id=d.id;
		userID=d.userID;
		funID=d.funID;
		return *this;
	}
	bool equal(const EFunView &other) const {
		if(id!=other.id)return false;
		if(userID!=other.userID)return false;
		if(funID!=other.funID)return false;
		return true;
	}
	qint64 id;
	qint64 userID;
	qint64 funID;
};

Q_DECLARE_METATYPE(EFunView)
Q_DECLARE_METATYPE(EFunView*)
Q_DECLARE_METATYPE(QList<EFunView*>)
Q_DECLARE_METATYPE(QList<EFunView>)
#endif
