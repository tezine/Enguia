#ifndef EUSERSERVICEEXCEPTION_H
#define EUSERSERVICEEXCEPTION_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserServiceException
**/
class  EUserServiceException : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 professionalUserID READ getProfessionalUserID WRITE setProfessionalUserID USER true)
	Q_PROPERTY(QDate exceptionDate READ getExceptionDate WRITE setExceptionDate USER true)
	Q_PROPERTY(qint32 status READ getStatus WRITE setStatus USER true)

public:
	Q_INVOKABLE EUserServiceException(QObject *parent=0);
	~EUserServiceException(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserServiceException(const EUserServiceException &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserServiceException &operator=(const EUserServiceException &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserServiceException &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserServiceException &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getProfessionalUserID() const {return professionalUserID;}
	void setProfessionalUserID(qint64 d){professionalUserID=d;}
	Q_INVOKABLE QDate getExceptionDate() const {return exceptionDate;}
	void setExceptionDate(const QDate &d){exceptionDate=d;}
	inline qint32 getStatus() const {return status;}
	void setStatus(qint32 d){status=d;}

protected:
	EUserServiceException &setData(const EUserServiceException &d){
		id=d.id;
		professionalUserID=d.professionalUserID;
		exceptionDate=d.exceptionDate;
		status=d.status;
		return *this;
	}
	bool equal(const EUserServiceException &other) const {
		if(id!=other.id)return false;
		if(professionalUserID!=other.professionalUserID)return false;
		if(exceptionDate!=other.exceptionDate)return false;
		if(status!=other.status)return false;
		return true;
	}
	qint64 id;
	qint64 professionalUserID;
	QDate exceptionDate;
	qint32 status;
};

Q_DECLARE_METATYPE(EUserServiceException)
Q_DECLARE_METATYPE(EUserServiceException*)
Q_DECLARE_METATYPE(QList<EUserServiceException*>)
Q_DECLARE_METATYPE(QList<EUserServiceException>)
#endif
