#ifndef EUSERBLOCKTEXT_H
#define EUSERBLOCKTEXT_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserBlockText
**/
class  EUserBlockText : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)

public:
	Q_INVOKABLE EUserBlockText(QObject *parent=0);
	~EUserBlockText(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserBlockText(const EUserBlockText &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserBlockText &operator=(const EUserBlockText &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserBlockText &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserBlockText &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}

protected:
	EUserBlockText &setData(const EUserBlockText &d){
		id=d.id;
		userID=d.userID;
		return *this;
	}
	bool equal(const EUserBlockText &other) const {
		if(id!=other.id)return false;
		if(userID!=other.userID)return false;
		return true;
	}
	qint64 id;
	qint64 userID;
};

Q_DECLARE_METATYPE(EUserBlockText)
Q_DECLARE_METATYPE(EUserBlockText*)
Q_DECLARE_METATYPE(QList<EUserBlockText*>)
Q_DECLARE_METATYPE(QList<EUserBlockText>)
#endif
