#ifndef EUSERMENU_H
#define EUSERMENU_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserMenu
**/
class  EUserMenu : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 blockID READ getBlockID WRITE setBlockID USER true)
	Q_PROPERTY(QString title READ getTitle WRITE setTitle USER true)
	Q_PROPERTY(QString subTitle READ getSubTitle WRITE setSubTitle USER true)
	Q_PROPERTY(qint32 targetBlockType READ getTargetBlockType WRITE setTargetBlockType USER true)
	Q_PROPERTY(qint64 targetBlockID READ getTargetBlockID WRITE setTargetBlockID USER true)
	Q_PROPERTY(qint32 visibility READ getVisibility WRITE setVisibility USER true)
	Q_PROPERTY(qint32 nextBlockVisibility READ getNextBlockVisibility WRITE setNextBlockVisibility USER true)

public:
	Q_INVOKABLE EUserMenu(QObject *parent=0);
	~EUserMenu(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserMenu(const EUserMenu &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserMenu &operator=(const EUserMenu &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserMenu &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserMenu &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getBlockID() const {return blockID;}
	void setBlockID(qint64 d){blockID=d;}
	Q_INVOKABLE QString getTitle() const {return title;}
	void setTitle(const QString &d){title=d;}
	Q_INVOKABLE QString getSubTitle() const {return subTitle;}
	void setSubTitle(const QString &d){subTitle=d;}
	inline qint32 getTargetBlockType() const {return targetBlockType;}
	void setTargetBlockType(qint32 d){targetBlockType=d;}
	inline qint64 getTargetBlockID() const {return targetBlockID;}
	void setTargetBlockID(qint64 d){targetBlockID=d;}
	inline qint32 getVisibility() const {return visibility;}
	void setVisibility(qint32 d){visibility=d;}
	inline qint32 getNextBlockVisibility() const {return nextBlockVisibility;}
	void setNextBlockVisibility(qint32 d){nextBlockVisibility=d;}

protected:
	EUserMenu &setData(const EUserMenu &d){
		id=d.id;
		blockID=d.blockID;
		title=d.title;
		subTitle=d.subTitle;
		targetBlockType=d.targetBlockType;
		targetBlockID=d.targetBlockID;
		visibility=d.visibility;
		nextBlockVisibility=d.nextBlockVisibility;
		return *this;
	}
	bool equal(const EUserMenu &other) const {
		if(id!=other.id)return false;
		if(blockID!=other.blockID)return false;
		if(title!=other.title)return false;
		if(subTitle!=other.subTitle)return false;
		if(targetBlockType!=other.targetBlockType)return false;
		if(targetBlockID!=other.targetBlockID)return false;
		if(visibility!=other.visibility)return false;
		if(nextBlockVisibility!=other.nextBlockVisibility)return false;
		return true;
	}
	qint64 id;
	qint64 blockID;
	QString title;
	QString subTitle;
	qint32 targetBlockType;
	qint64 targetBlockID;
	qint32 visibility;
	qint32 nextBlockVisibility;
};

Q_DECLARE_METATYPE(EUserMenu)
Q_DECLARE_METATYPE(EUserMenu*)
Q_DECLARE_METATYPE(QList<EUserMenu*>)
Q_DECLARE_METATYPE(QList<EUserMenu>)
#endif
