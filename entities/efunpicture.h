#ifndef EFUNPICTURE_H
#define EFUNPICTURE_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EFunPicture
**/
class  EFunPicture : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 funID READ getFunID WRITE setFunID USER true)
	Q_PROPERTY(qint64 picNumber READ getPicNumber WRITE setPicNumber USER true)
	Q_PROPERTY(QString author READ getAuthor WRITE setAuthor USER true)
	Q_PROPERTY(QString description READ getDescription WRITE setDescription USER true)
	Q_PROPERTY(QByteArray image READ getImage WRITE setImage USER true)

public:
	Q_INVOKABLE EFunPicture(QObject *parent=0);
	~EFunPicture(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EFunPicture(const EFunPicture &d) : QObject () { setData(d); }
	Q_INVOKABLE EFunPicture &operator=(const EFunPicture &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EFunPicture &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EFunPicture &other) const{ if(equal(other))return false;return true;}
	inline qint64 getFunID() const {return funID;}
	void setFunID(qint64 d){funID=d;}
	inline qint64 getPicNumber() const {return picNumber;}
	void setPicNumber(qint64 d){picNumber=d;}
	Q_INVOKABLE QString getAuthor() const {return author;}
	void setAuthor(const QString &d){author=d;}
	Q_INVOKABLE QString getDescription() const {return description;}
	void setDescription(const QString &d){description=d;}
	Q_INVOKABLE QByteArray getImage() const {return image;}
	void setImage(const QByteArray &d){image=d;}

protected:
	EFunPicture &setData(const EFunPicture &d){
		funID=d.funID;
		picNumber=d.picNumber;
		author=d.author;
		description=d.description;
		image=d.image;
		return *this;
	}
	bool equal(const EFunPicture &other) const {
		if(funID!=other.funID)return false;
		if(picNumber!=other.picNumber)return false;
		if(author!=other.author)return false;
		if(description!=other.description)return false;
		if(image!=other.image)return false;
		return true;
	}
	qint64 funID;
	qint64 picNumber;
	QString author;
	QString description;
	QByteArray image;
};

Q_DECLARE_METATYPE(EFunPicture)
Q_DECLARE_METATYPE(EFunPicture*)
Q_DECLARE_METATYPE(QList<EFunPicture*>)
Q_DECLARE_METATYPE(QList<EFunPicture>)
#endif
