#ifndef EUSERSCHEDULE_H
#define EUSERSCHEDULE_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserSchedule
**/
class  EUserSchedule : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 visualID READ getVisualID WRITE setVisualID USER true)
	Q_PROPERTY(qint64 professionalUserID READ getProfessionalUserID WRITE setProfessionalUserID USER true)
	Q_PROPERTY(QString professionalUserName READ getProfessionalUserName WRITE setProfessionalUserName USER true)
	Q_PROPERTY(qint64 clientUserID READ getClientUserID WRITE setClientUserID USER true)
	Q_PROPERTY(QString clientUserName READ getClientUserName WRITE setClientUserName USER true)
	Q_PROPERTY(qint64 serviceID READ getServiceID WRITE setServiceID USER true)
	Q_PROPERTY(QDate dt READ getDt WRITE setDt USER true)
	Q_PROPERTY(QTime tm READ getTm WRITE setTm USER true)
	Q_PROPERTY(QString comment READ getComment WRITE setComment USER true)
	Q_PROPERTY(bool isNew READ getIsNew WRITE setIsNew USER true)
	Q_PROPERTY(qint32 status READ getStatus WRITE setStatus USER true)
	Q_PROPERTY(QString serviceName READ getServiceName WRITE setServiceName USER true)
	Q_PROPERTY(QString servicePrice READ getServicePrice WRITE setServicePrice USER true)
	Q_PROPERTY(qint64 clientID READ getClientID WRITE setClientID USER true)
	Q_PROPERTY(QString clientMobile READ getClientMobile WRITE setClientMobile USER true)
	Q_PROPERTY(QString clientPhone READ getClientPhone WRITE setClientPhone USER true)

public:
	Q_INVOKABLE EUserSchedule(QObject *parent=0);
	~EUserSchedule(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserSchedule(const EUserSchedule &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserSchedule &operator=(const EUserSchedule &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserSchedule &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserSchedule &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getVisualID() const {return visualID;}
	void setVisualID(qint64 d){visualID=d;}
	inline qint64 getProfessionalUserID() const {return professionalUserID;}
	void setProfessionalUserID(qint64 d){professionalUserID=d;}
	Q_INVOKABLE QString getProfessionalUserName() const {return professionalUserName;}
	void setProfessionalUserName(const QString &d){professionalUserName=d;}
	inline qint64 getClientUserID() const {return clientUserID;}
	void setClientUserID(qint64 d){clientUserID=d;}
	Q_INVOKABLE QString getClientUserName() const {return clientUserName;}
	void setClientUserName(const QString &d){clientUserName=d;}
	inline qint64 getServiceID() const {return serviceID;}
	void setServiceID(qint64 d){serviceID=d;}
	Q_INVOKABLE QDate getDt() const {return dt;}
	void setDt(const QDate &d){dt=d;}
	Q_INVOKABLE QTime getTm() const {return tm;}
	void setTm(const QTime &d){tm=d;}
	Q_INVOKABLE QString getComment() const {return comment;}
	void setComment(const QString &d){comment=d;}
	inline bool getIsNew() const {return isNew;}
	void setIsNew(bool d){isNew=d;}
	inline qint32 getStatus() const {return status;}
	void setStatus(qint32 d){status=d;}
	Q_INVOKABLE QString getServiceName() const {return serviceName;}
	void setServiceName(const QString &d){serviceName=d;}
	Q_INVOKABLE QString getServicePrice() const {return servicePrice;}
	void setServicePrice(const QString &d){servicePrice=d;}
	inline qint64 getClientID() const {return clientID;}
	void setClientID(qint64 d){clientID=d;}
	Q_INVOKABLE QString getClientMobile() const {return clientMobile;}
	void setClientMobile(const QString &d){clientMobile=d;}
	Q_INVOKABLE QString getClientPhone() const {return clientPhone;}
	void setClientPhone(const QString &d){clientPhone=d;}

protected:
	EUserSchedule &setData(const EUserSchedule &d){
		id=d.id;
		visualID=d.visualID;
		professionalUserID=d.professionalUserID;
		professionalUserName=d.professionalUserName;
		clientUserID=d.clientUserID;
		clientUserName=d.clientUserName;
		serviceID=d.serviceID;
		dt=d.dt;
		tm=d.tm;
		comment=d.comment;
		isNew=d.isNew;
		status=d.status;
		serviceName=d.serviceName;
		servicePrice=d.servicePrice;
		clientID=d.clientID;
		clientMobile=d.clientMobile;
		clientPhone=d.clientPhone;
		return *this;
	}
	bool equal(const EUserSchedule &other) const {
		if(id!=other.id)return false;
		if(visualID!=other.visualID)return false;
		if(professionalUserID!=other.professionalUserID)return false;
		if(professionalUserName!=other.professionalUserName)return false;
		if(clientUserID!=other.clientUserID)return false;
		if(clientUserName!=other.clientUserName)return false;
		if(serviceID!=other.serviceID)return false;
		if(dt!=other.dt)return false;
		if(tm!=other.tm)return false;
		if(comment!=other.comment)return false;
		if(isNew!=other.isNew)return false;
		if(status!=other.status)return false;
		if(serviceName!=other.serviceName)return false;
		if(servicePrice!=other.servicePrice)return false;
		if(clientID!=other.clientID)return false;
		if(clientMobile!=other.clientMobile)return false;
		if(clientPhone!=other.clientPhone)return false;
		return true;
	}
	qint64 id;
	qint64 visualID;
	qint64 professionalUserID;
	QString professionalUserName;
	qint64 clientUserID;
	QString clientUserName;
	qint64 serviceID;
	QDate dt;
	QTime tm;
	QString comment;
	bool isNew;
	qint32 status;
	QString serviceName;
	QString servicePrice;
	qint64 clientID;
	QString clientMobile;
	QString clientPhone;
};

Q_DECLARE_METATYPE(EUserSchedule)
Q_DECLARE_METATYPE(EUserSchedule*)
Q_DECLARE_METATYPE(QList<EUserSchedule*>)
Q_DECLARE_METATYPE(QList<EUserSchedule>)
#endif
