#ifndef EFUNPLACESCOMMENT_H
#define EFUNPLACESCOMMENT_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EFunPlacesComment
**/
class  EFunPlacesComment : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 funID READ getFunID WRITE setFunID USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(qint32 rating READ getRating WRITE setRating USER true)
	Q_PROPERTY(QString comment READ getComment WRITE setComment USER true)
	Q_PROPERTY(QDateTime dateInserted READ getDateInserted WRITE setDateInserted USER true)

public:
	Q_INVOKABLE EFunPlacesComment(QObject *parent=0);
	~EFunPlacesComment(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EFunPlacesComment(const EFunPlacesComment &d) : QObject () { setData(d); }
	Q_INVOKABLE EFunPlacesComment &operator=(const EFunPlacesComment &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EFunPlacesComment &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EFunPlacesComment &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getFunID() const {return funID;}
	void setFunID(qint64 d){funID=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	inline qint32 getRating() const {return rating;}
	void setRating(qint32 d){rating=d;}
	Q_INVOKABLE QString getComment() const {return comment;}
	void setComment(const QString &d){comment=d;}
	Q_INVOKABLE QDateTime getDateInserted() const {return dateInserted;}
	void setDateInserted(const QDateTime &d){dateInserted=d;}

protected:
	EFunPlacesComment &setData(const EFunPlacesComment &d){
		id=d.id;
		funID=d.funID;
		userID=d.userID;
		rating=d.rating;
		comment=d.comment;
		dateInserted=d.dateInserted;
		return *this;
	}
	bool equal(const EFunPlacesComment &other) const {
		if(id!=other.id)return false;
		if(funID!=other.funID)return false;
		if(userID!=other.userID)return false;
		if(rating!=other.rating)return false;
		if(comment!=other.comment)return false;
		if(dateInserted!=other.dateInserted)return false;
		return true;
	}
	qint64 id;
	qint64 funID;
	qint64 userID;
	qint32 rating;
	QString comment;
	QDateTime dateInserted;
};

Q_DECLARE_METATYPE(EFunPlacesComment)
Q_DECLARE_METATYPE(EFunPlacesComment*)
Q_DECLARE_METATYPE(QList<EFunPlacesComment*>)
Q_DECLARE_METATYPE(QList<EFunPlacesComment>)
#endif
