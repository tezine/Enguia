#ifndef ESQLITECONFIG_H
#define ESQLITECONFIG_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class ESqliteConfig
**/
class  ESqliteConfig : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint32 languageCodeID READ getLanguageCodeID WRITE setLanguageCodeID USER true)
	Q_PROPERTY(qint64 currentCityID READ getCurrentCityID WRITE setCurrentCityID USER true)
	Q_PROPERTY(QString currentCityName READ getCurrentCityName WRITE setCurrentCityName USER true)
	Q_PROPERTY(bool autoLogin READ getAutoLogin WRITE setAutoLogin USER true)
	Q_PROPERTY(QString login READ getLogin WRITE setLogin USER true)
	Q_PROPERTY(QByteArray password READ getPassword WRITE setPassword USER true)

public:
	Q_INVOKABLE ESqliteConfig(QObject *parent=0);
	~ESqliteConfig(){}
	static QMetaObject getMeta();
	Q_INVOKABLE ESqliteConfig(const ESqliteConfig &d) : QObject () { setData(d); }
	Q_INVOKABLE ESqliteConfig &operator=(const ESqliteConfig &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const ESqliteConfig &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const ESqliteConfig &other) const{ if(equal(other))return false;return true;}
	inline qint32 getLanguageCodeID() const {return languageCodeID;}
	void setLanguageCodeID(qint32 d){languageCodeID=d;}
	inline qint64 getCurrentCityID() const {return currentCityID;}
	void setCurrentCityID(qint64 d){currentCityID=d;}
	Q_INVOKABLE QString getCurrentCityName() const {return currentCityName;}
	void setCurrentCityName(const QString &d){currentCityName=d;}
	inline bool getAutoLogin() const {return autoLogin;}
	void setAutoLogin(bool d){autoLogin=d;}
	Q_INVOKABLE QString getLogin() const {return login;}
	void setLogin(const QString &d){login=d;}
	Q_INVOKABLE QByteArray getPassword() const {return password;}
	void setPassword(const QByteArray &d){password=d;}

protected:
	ESqliteConfig &setData(const ESqliteConfig &d){
		languageCodeID=d.languageCodeID;
		currentCityID=d.currentCityID;
		currentCityName=d.currentCityName;
		autoLogin=d.autoLogin;
		login=d.login;
		password=d.password;
		return *this;
	}
	bool equal(const ESqliteConfig &other) const {
		if(languageCodeID!=other.languageCodeID)return false;
		if(currentCityID!=other.currentCityID)return false;
		if(currentCityName!=other.currentCityName)return false;
		if(autoLogin!=other.autoLogin)return false;
		if(login!=other.login)return false;
		if(password!=other.password)return false;
		return true;
	}
	qint32 languageCodeID;
	qint64 currentCityID;
	QString currentCityName;
	bool autoLogin;
	QString login;
	QByteArray password;
};

Q_DECLARE_METATYPE(ESqliteConfig)
Q_DECLARE_METATYPE(ESqliteConfig*)
Q_DECLARE_METATYPE(QList<ESqliteConfig*>)
Q_DECLARE_METATYPE(QList<ESqliteConfig>)
#endif
