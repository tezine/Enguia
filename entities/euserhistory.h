#ifndef EUSERHISTORY_H
#define EUSERHISTORY_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserHistory
**/
class  EUserHistory : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint32 historyType READ getHistoryType WRITE setHistoryType USER true)
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 visualID READ getVisualID WRITE setVisualID USER true)
	Q_PROPERTY(QString name READ getName WRITE setName USER true)
	Q_PROPERTY(QString placeName READ getPlaceName WRITE setPlaceName USER true)
	Q_PROPERTY(qint64 placeID READ getPlaceID WRITE setPlaceID USER true)
	Q_PROPERTY(QDateTime dateInserted READ getDateInserted WRITE setDateInserted USER true)
	Q_PROPERTY(QTime fixedTime READ getFixedTime WRITE setFixedTime USER true)

public:
	Q_INVOKABLE EUserHistory(QObject *parent=0);
	~EUserHistory(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserHistory(const EUserHistory &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserHistory &operator=(const EUserHistory &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserHistory &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserHistory &other) const{ if(equal(other))return false;return true;}
	inline qint32 getHistoryType() const {return historyType;}
	void setHistoryType(qint32 d){historyType=d;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getVisualID() const {return visualID;}
	void setVisualID(qint64 d){visualID=d;}
	Q_INVOKABLE QString getName() const {return name;}
	void setName(const QString &d){name=d;}
	Q_INVOKABLE QString getPlaceName() const {return placeName;}
	void setPlaceName(const QString &d){placeName=d;}
	inline qint64 getPlaceID() const {return placeID;}
	void setPlaceID(qint64 d){placeID=d;}
	Q_INVOKABLE QDateTime getDateInserted() const {return dateInserted;}
	void setDateInserted(const QDateTime &d){dateInserted=d;}
	Q_INVOKABLE QTime getFixedTime() const {return fixedTime;}
	void setFixedTime(const QTime &d){fixedTime=d;}

protected:
	EUserHistory &setData(const EUserHistory &d){
		historyType=d.historyType;
		id=d.id;
		visualID=d.visualID;
		name=d.name;
		placeName=d.placeName;
		placeID=d.placeID;
		dateInserted=d.dateInserted;
		fixedTime=d.fixedTime;
		return *this;
	}
	bool equal(const EUserHistory &other) const {
		if(historyType!=other.historyType)return false;
		if(id!=other.id)return false;
		if(visualID!=other.visualID)return false;
		if(name!=other.name)return false;
		if(placeName!=other.placeName)return false;
		if(placeID!=other.placeID)return false;
		if(dateInserted!=other.dateInserted)return false;
		if(fixedTime!=other.fixedTime)return false;
		return true;
	}
	qint32 historyType;
	qint64 id;
	qint64 visualID;
	QString name;
	QString placeName;
	qint64 placeID;
	QDateTime dateInserted;
	QTime fixedTime;
};

Q_DECLARE_METATYPE(EUserHistory)
Q_DECLARE_METATYPE(EUserHistory*)
Q_DECLARE_METATYPE(QList<EUserHistory*>)
Q_DECLARE_METATYPE(QList<EUserHistory>)
#endif
