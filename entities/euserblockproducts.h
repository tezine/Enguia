#ifndef EUSERBLOCKPRODUCTS_H
#define EUSERBLOCKPRODUCTS_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserBlockProducts
**/
class  EUserBlockProducts : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(QString name READ getName WRITE setName USER true)
	Q_PROPERTY(qint32 visibility READ getVisibility WRITE setVisibility USER true)
	Q_PROPERTY(bool displayImg READ getDisplayImg WRITE setDisplayImg USER true)
	Q_PROPERTY(bool displayPrice READ getDisplayPrice WRITE setDisplayPrice USER true)
	Q_PROPERTY(bool sellProducts READ getSellProducts WRITE setSellProducts USER true)
	Q_PROPERTY(bool deliverProducts READ getDeliverProducts WRITE setDeliverProducts USER true)
	Q_PROPERTY(double deliveryTax READ getDeliveryTax WRITE setDeliveryTax USER true)
	Q_PROPERTY(bool acceptExternalOrderWhenClosed READ getAcceptExternalOrderWhenClosed WRITE setAcceptExternalOrderWhenClosed USER true)
	Q_PROPERTY(bool acceptOnlinePayment READ getAcceptOnlinePayment WRITE setAcceptOnlinePayment USER true)
	Q_PROPERTY(qint32 paymentTypes READ getPaymentTypes WRITE setPaymentTypes USER true)
	Q_PROPERTY(qint32 creditCardTypes READ getCreditCardTypes WRITE setCreditCardTypes USER true)
	Q_PROPERTY(qint32 currencyType READ getCurrencyType WRITE setCurrencyType USER true)
	Q_PROPERTY(bool collectAndDeliver READ getCollectAndDeliver WRITE setCollectAndDeliver USER true)
	Q_PROPERTY(qint32 minimumDeliverDays READ getMinimumDeliverDays WRITE setMinimumDeliverDays USER true)
	Q_PROPERTY(qint32 nextBlockType READ getNextBlockType WRITE setNextBlockType USER true)
	Q_PROPERTY(qint64 nextBlockID READ getNextBlockID WRITE setNextBlockID USER true)
	Q_PROPERTY(bool containsCategoriesExternal READ getContainsCategoriesExternal WRITE setContainsCategoriesExternal USER true)

public:
	Q_INVOKABLE EUserBlockProducts(QObject *parent=0);
	~EUserBlockProducts(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserBlockProducts(const EUserBlockProducts &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserBlockProducts &operator=(const EUserBlockProducts &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserBlockProducts &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserBlockProducts &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	Q_INVOKABLE QString getName() const {return name;}
	void setName(const QString &d){name=d;}
	inline qint32 getVisibility() const {return visibility;}
	void setVisibility(qint32 d){visibility=d;}
	inline bool getDisplayImg() const {return displayImg;}
	void setDisplayImg(bool d){displayImg=d;}
	inline bool getDisplayPrice() const {return displayPrice;}
	void setDisplayPrice(bool d){displayPrice=d;}
	inline bool getSellProducts() const {return sellProducts;}
	void setSellProducts(bool d){sellProducts=d;}
	inline bool getDeliverProducts() const {return deliverProducts;}
	void setDeliverProducts(bool d){deliverProducts=d;}
	inline double getDeliveryTax() const {return deliveryTax;}
	void setDeliveryTax(double d){deliveryTax=d;}
	inline bool getAcceptExternalOrderWhenClosed() const {return acceptExternalOrderWhenClosed;}
	void setAcceptExternalOrderWhenClosed(bool d){acceptExternalOrderWhenClosed=d;}
	inline bool getAcceptOnlinePayment() const {return acceptOnlinePayment;}
	void setAcceptOnlinePayment(bool d){acceptOnlinePayment=d;}
	inline qint32 getPaymentTypes() const {return paymentTypes;}
	void setPaymentTypes(qint32 d){paymentTypes=d;}
	inline qint32 getCreditCardTypes() const {return creditCardTypes;}
	void setCreditCardTypes(qint32 d){creditCardTypes=d;}
	inline qint32 getCurrencyType() const {return currencyType;}
	void setCurrencyType(qint32 d){currencyType=d;}
	inline bool getCollectAndDeliver() const {return collectAndDeliver;}
	void setCollectAndDeliver(bool d){collectAndDeliver=d;}
	inline qint32 getMinimumDeliverDays() const {return minimumDeliverDays;}
	void setMinimumDeliverDays(qint32 d){minimumDeliverDays=d;}
	inline qint32 getNextBlockType() const {return nextBlockType;}
	void setNextBlockType(qint32 d){nextBlockType=d;}
	inline qint64 getNextBlockID() const {return nextBlockID;}
	void setNextBlockID(qint64 d){nextBlockID=d;}
	inline bool getContainsCategoriesExternal() const {return containsCategoriesExternal;}
	void setContainsCategoriesExternal(bool d){containsCategoriesExternal=d;}

protected:
	EUserBlockProducts &setData(const EUserBlockProducts &d){
		id=d.id;
		userID=d.userID;
		name=d.name;
		visibility=d.visibility;
		displayImg=d.displayImg;
		displayPrice=d.displayPrice;
		sellProducts=d.sellProducts;
		deliverProducts=d.deliverProducts;
		deliveryTax=d.deliveryTax;
		acceptExternalOrderWhenClosed=d.acceptExternalOrderWhenClosed;
		acceptOnlinePayment=d.acceptOnlinePayment;
		paymentTypes=d.paymentTypes;
		creditCardTypes=d.creditCardTypes;
		currencyType=d.currencyType;
		collectAndDeliver=d.collectAndDeliver;
		minimumDeliverDays=d.minimumDeliverDays;
		nextBlockType=d.nextBlockType;
		nextBlockID=d.nextBlockID;
		containsCategoriesExternal=d.containsCategoriesExternal;
		return *this;
	}
	bool equal(const EUserBlockProducts &other) const {
		if(id!=other.id)return false;
		if(userID!=other.userID)return false;
		if(name!=other.name)return false;
		if(visibility!=other.visibility)return false;
		if(displayImg!=other.displayImg)return false;
		if(displayPrice!=other.displayPrice)return false;
		if(sellProducts!=other.sellProducts)return false;
		if(deliverProducts!=other.deliverProducts)return false;
		if(deliveryTax!=other.deliveryTax)return false;
		if(acceptExternalOrderWhenClosed!=other.acceptExternalOrderWhenClosed)return false;
		if(acceptOnlinePayment!=other.acceptOnlinePayment)return false;
		if(paymentTypes!=other.paymentTypes)return false;
		if(creditCardTypes!=other.creditCardTypes)return false;
		if(currencyType!=other.currencyType)return false;
		if(collectAndDeliver!=other.collectAndDeliver)return false;
		if(minimumDeliverDays!=other.minimumDeliverDays)return false;
		if(nextBlockType!=other.nextBlockType)return false;
		if(nextBlockID!=other.nextBlockID)return false;
		if(containsCategoriesExternal!=other.containsCategoriesExternal)return false;
		return true;
	}
	qint64 id;
	qint64 userID;
	QString name;
	qint32 visibility;
	bool displayImg;
	bool displayPrice;
	bool sellProducts;
	bool deliverProducts;
	double deliveryTax;
	bool acceptExternalOrderWhenClosed;
	bool acceptOnlinePayment;
	qint32 paymentTypes;
	qint32 creditCardTypes;
	qint32 currencyType;
	bool collectAndDeliver;
	qint32 minimumDeliverDays;
	qint32 nextBlockType;
	qint64 nextBlockID;
	bool containsCategoriesExternal;
};

Q_DECLARE_METATYPE(EUserBlockProducts)
Q_DECLARE_METATYPE(EUserBlockProducts*)
Q_DECLARE_METATYPE(QList<EUserBlockProducts*>)
Q_DECLARE_METATYPE(QList<EUserBlockProducts>)
#endif
