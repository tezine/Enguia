#ifndef ECSNEW_H
#define ECSNEW_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class ECSNew
**/
class  ECSNew : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(QString content READ getContent WRITE setContent USER true)
	Q_PROPERTY(QDateTime dateInserted READ getDateInserted WRITE setDateInserted USER true)
	Q_PROPERTY(QByteArray icon READ getIcon WRITE setIcon USER true)
	Q_PROPERTY(QString from READ getFrom WRITE setFrom USER true)
	Q_PROPERTY(QString title READ getTitle WRITE setTitle USER true)
	Q_PROPERTY(qint64 contactID READ getContactID WRITE setContactID USER true)
	Q_PROPERTY(qint64 userID READ getUserID WRITE setUserID USER true)
	Q_PROPERTY(qint64 likesCount READ getLikesCount WRITE setLikesCount USER true)

public:
	Q_INVOKABLE ECSNew(QObject *parent=0);
	~ECSNew(){}
	static QMetaObject getMeta();
	Q_INVOKABLE ECSNew(const ECSNew &d) : QObject () { setData(d); }
	Q_INVOKABLE ECSNew &operator=(const ECSNew &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const ECSNew &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const ECSNew &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	Q_INVOKABLE QString getContent() const {return content;}
	void setContent(const QString &d){content=d;}
	Q_INVOKABLE QDateTime getDateInserted() const {return dateInserted;}
	void setDateInserted(const QDateTime &d){dateInserted=d;}
	Q_INVOKABLE QByteArray getIcon() const {return icon;}
	void setIcon(const QByteArray &d){icon=d;}
	Q_INVOKABLE QString getFrom() const {return from;}
	void setFrom(const QString &d){from=d;}
	Q_INVOKABLE QString getTitle() const {return title;}
	void setTitle(const QString &d){title=d;}
	inline qint64 getContactID() const {return contactID;}
	void setContactID(qint64 d){contactID=d;}
	inline qint64 getUserID() const {return userID;}
	void setUserID(qint64 d){userID=d;}
	inline qint64 getLikesCount() const {return likesCount;}
	void setLikesCount(qint64 d){likesCount=d;}

protected:
	ECSNew &setData(const ECSNew &d){
		id=d.id;
		content=d.content;
		dateInserted=d.dateInserted;
		icon=d.icon;
		from=d.from;
		title=d.title;
		contactID=d.contactID;
		userID=d.userID;
		likesCount=d.likesCount;
		return *this;
	}
	bool equal(const ECSNew &other) const {
		if(id!=other.id)return false;
		if(content!=other.content)return false;
		if(dateInserted!=other.dateInserted)return false;
		if(icon!=other.icon)return false;
		if(from!=other.from)return false;
		if(title!=other.title)return false;
		if(contactID!=other.contactID)return false;
		if(userID!=other.userID)return false;
		if(likesCount!=other.likesCount)return false;
		return true;
	}
	qint64 id;
	QString content;
	QDateTime dateInserted;
	QByteArray icon;
	QString from;
	QString title;
	qint64 contactID;
	qint64 userID;
	qint64 likesCount;
};

Q_DECLARE_METATYPE(ECSNew)
Q_DECLARE_METATYPE(ECSNew*)
Q_DECLARE_METATYPE(QList<ECSNew*>)
Q_DECLARE_METATYPE(QList<ECSNew>)
#endif
