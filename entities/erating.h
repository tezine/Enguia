#ifndef ERATING_H
#define ERATING_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class ERating
**/
class  ERating : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint32 rating READ getRating WRITE setRating USER true)
	Q_PROPERTY(qint32 voteCount READ getVoteCount WRITE setVoteCount USER true)

public:
	Q_INVOKABLE ERating(QObject *parent=0);
	~ERating(){}
	static QMetaObject getMeta();
	Q_INVOKABLE ERating(const ERating &d) : QObject () { setData(d); }
	Q_INVOKABLE ERating &operator=(const ERating &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const ERating &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const ERating &other) const{ if(equal(other))return false;return true;}
	inline qint32 getRating() const {return rating;}
	void setRating(qint32 d){rating=d;}
	inline qint32 getVoteCount() const {return voteCount;}
	void setVoteCount(qint32 d){voteCount=d;}

protected:
	ERating &setData(const ERating &d){
		rating=d.rating;
		voteCount=d.voteCount;
		return *this;
	}
	bool equal(const ERating &other) const {
		if(rating!=other.rating)return false;
		if(voteCount!=other.voteCount)return false;
		return true;
	}
	qint32 rating;
	qint32 voteCount;
};

Q_DECLARE_METATYPE(ERating)
Q_DECLARE_METATYPE(ERating*)
Q_DECLARE_METATYPE(QList<ERating*>)
Q_DECLARE_METATYPE(QList<ERating>)
#endif
