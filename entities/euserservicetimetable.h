#ifndef EUSERSERVICETIMETABLE_H
#define EUSERSERVICETIMETABLE_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserServiceTimetable
**/
class  EUserServiceTimetable : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 serviceID READ getServiceID WRITE setServiceID USER true)
	Q_PROPERTY(QString serviceName READ getServiceName WRITE setServiceName USER true)
	Q_PROPERTY(qint32 weekDay READ getWeekDay WRITE setWeekDay USER true)
	Q_PROPERTY(qint32 maximumCount READ getMaximumCount WRITE setMaximumCount USER true)
	Q_PROPERTY(qint32 gapDisplayed READ getGapDisplayed WRITE setGapDisplayed USER true)
	Q_PROPERTY(QTime period1Start READ getPeriod1Start WRITE setPeriod1Start USER true)
	Q_PROPERTY(QTime period1End READ getPeriod1End WRITE setPeriod1End USER true)
	Q_PROPERTY(QTime period2Start READ getPeriod2Start WRITE setPeriod2Start USER true)
	Q_PROPERTY(QTime period2End READ getPeriod2End WRITE setPeriod2End USER true)
	Q_PROPERTY(QTime period3Start READ getPeriod3Start WRITE setPeriod3Start USER true)
	Q_PROPERTY(QTime period3End READ getPeriod3End WRITE setPeriod3End USER true)
	Q_PROPERTY(QTime period4Start READ getPeriod4Start WRITE setPeriod4Start USER true)
	Q_PROPERTY(QTime period4End READ getPeriod4End WRITE setPeriod4End USER true)

public:
	Q_INVOKABLE EUserServiceTimetable(QObject *parent=0);
	~EUserServiceTimetable(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserServiceTimetable(const EUserServiceTimetable &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserServiceTimetable &operator=(const EUserServiceTimetable &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserServiceTimetable &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserServiceTimetable &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getServiceID() const {return serviceID;}
	void setServiceID(qint64 d){serviceID=d;}
	Q_INVOKABLE QString getServiceName() const {return serviceName;}
	void setServiceName(const QString &d){serviceName=d;}
	inline qint32 getWeekDay() const {return weekDay;}
	void setWeekDay(qint32 d){weekDay=d;}
	inline qint32 getMaximumCount() const {return maximumCount;}
	void setMaximumCount(qint32 d){maximumCount=d;}
	inline qint32 getGapDisplayed() const {return gapDisplayed;}
	void setGapDisplayed(qint32 d){gapDisplayed=d;}
	Q_INVOKABLE QTime getPeriod1Start() const {return period1Start;}
	void setPeriod1Start(const QTime &d){period1Start=d;}
	Q_INVOKABLE QTime getPeriod1End() const {return period1End;}
	void setPeriod1End(const QTime &d){period1End=d;}
	Q_INVOKABLE QTime getPeriod2Start() const {return period2Start;}
	void setPeriod2Start(const QTime &d){period2Start=d;}
	Q_INVOKABLE QTime getPeriod2End() const {return period2End;}
	void setPeriod2End(const QTime &d){period2End=d;}
	Q_INVOKABLE QTime getPeriod3Start() const {return period3Start;}
	void setPeriod3Start(const QTime &d){period3Start=d;}
	Q_INVOKABLE QTime getPeriod3End() const {return period3End;}
	void setPeriod3End(const QTime &d){period3End=d;}
	Q_INVOKABLE QTime getPeriod4Start() const {return period4Start;}
	void setPeriod4Start(const QTime &d){period4Start=d;}
	Q_INVOKABLE QTime getPeriod4End() const {return period4End;}
	void setPeriod4End(const QTime &d){period4End=d;}

protected:
	EUserServiceTimetable &setData(const EUserServiceTimetable &d){
		id=d.id;
		serviceID=d.serviceID;
		serviceName=d.serviceName;
		weekDay=d.weekDay;
		maximumCount=d.maximumCount;
		gapDisplayed=d.gapDisplayed;
		period1Start=d.period1Start;
		period1End=d.period1End;
		period2Start=d.period2Start;
		period2End=d.period2End;
		period3Start=d.period3Start;
		period3End=d.period3End;
		period4Start=d.period4Start;
		period4End=d.period4End;
		return *this;
	}
	bool equal(const EUserServiceTimetable &other) const {
		if(id!=other.id)return false;
		if(serviceID!=other.serviceID)return false;
		if(serviceName!=other.serviceName)return false;
		if(weekDay!=other.weekDay)return false;
		if(maximumCount!=other.maximumCount)return false;
		if(gapDisplayed!=other.gapDisplayed)return false;
		if(period1Start!=other.period1Start)return false;
		if(period1End!=other.period1End)return false;
		if(period2Start!=other.period2Start)return false;
		if(period2End!=other.period2End)return false;
		if(period3Start!=other.period3Start)return false;
		if(period3End!=other.period3End)return false;
		if(period4Start!=other.period4Start)return false;
		if(period4End!=other.period4End)return false;
		return true;
	}
	qint64 id;
	qint64 serviceID;
	QString serviceName;
	qint32 weekDay;
	qint32 maximumCount;
	qint32 gapDisplayed;
	QTime period1Start;
	QTime period1End;
	QTime period2Start;
	QTime period2End;
	QTime period3Start;
	QTime period3End;
	QTime period4Start;
	QTime period4End;
};

Q_DECLARE_METATYPE(EUserServiceTimetable)
Q_DECLARE_METATYPE(EUserServiceTimetable*)
Q_DECLARE_METATYPE(QList<EUserServiceTimetable*>)
Q_DECLARE_METATYPE(QList<EUserServiceTimetable>)
#endif
