#ifndef EUSERSERVICETIMETABLESTATUS_H
#define EUSERSERVICETIMETABLESTATUS_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserServiceTimetableStatus
**/
class  EUserServiceTimetableStatus : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(qint64 professionalUserID READ getProfessionalUserID WRITE setProfessionalUserID USER true)
	Q_PROPERTY(qint32 weekDay READ getWeekDay WRITE setWeekDay USER true)
	Q_PROPERTY(qint32 status READ getStatus WRITE setStatus USER true)
	Q_PROPERTY(qint32 sameAsWeekDay READ getSameAsWeekDay WRITE setSameAsWeekDay USER true)

public:
	Q_INVOKABLE EUserServiceTimetableStatus(QObject *parent=0);
	~EUserServiceTimetableStatus(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserServiceTimetableStatus(const EUserServiceTimetableStatus &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserServiceTimetableStatus &operator=(const EUserServiceTimetableStatus &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserServiceTimetableStatus &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserServiceTimetableStatus &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	inline qint64 getProfessionalUserID() const {return professionalUserID;}
	void setProfessionalUserID(qint64 d){professionalUserID=d;}
	inline qint32 getWeekDay() const {return weekDay;}
	void setWeekDay(qint32 d){weekDay=d;}
	inline qint32 getStatus() const {return status;}
	void setStatus(qint32 d){status=d;}
	inline qint32 getSameAsWeekDay() const {return sameAsWeekDay;}
	void setSameAsWeekDay(qint32 d){sameAsWeekDay=d;}

protected:
	EUserServiceTimetableStatus &setData(const EUserServiceTimetableStatus &d){
		id=d.id;
		professionalUserID=d.professionalUserID;
		weekDay=d.weekDay;
		status=d.status;
		sameAsWeekDay=d.sameAsWeekDay;
		return *this;
	}
	bool equal(const EUserServiceTimetableStatus &other) const {
		if(id!=other.id)return false;
		if(professionalUserID!=other.professionalUserID)return false;
		if(weekDay!=other.weekDay)return false;
		if(status!=other.status)return false;
		if(sameAsWeekDay!=other.sameAsWeekDay)return false;
		return true;
	}
	qint64 id;
	qint64 professionalUserID;
	qint32 weekDay;
	qint32 status;
	qint32 sameAsWeekDay;
};

Q_DECLARE_METATYPE(EUserServiceTimetableStatus)
Q_DECLARE_METATYPE(EUserServiceTimetableStatus*)
Q_DECLARE_METATYPE(QList<EUserServiceTimetableStatus*>)
Q_DECLARE_METATYPE(QList<EUserServiceTimetableStatus>)
#endif
