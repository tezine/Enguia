#ifndef EUSERSCHEDULECONFIRMATION_H
#define EUSERSCHEDULECONFIRMATION_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "QObject"


/**
*@class EUserScheduleConfirmation
**/
class  EUserScheduleConfirmation : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 serviceID READ getServiceID WRITE setServiceID USER true)
	Q_PROPERTY(QString serviceName READ getServiceName WRITE setServiceName USER true)
	Q_PROPERTY(qint64 professionalUserID READ getProfessionalUserID WRITE setProfessionalUserID USER true)
	Q_PROPERTY(QString professionalUserName READ getProfessionalUserName WRITE setProfessionalUserName USER true)
	Q_PROPERTY(QString professionalAddress READ getProfessionalAddress WRITE setProfessionalAddress USER true)
	Q_PROPERTY(QString professionalPhone READ getProfessionalPhone WRITE setProfessionalPhone USER true)
	Q_PROPERTY(double servicePrice READ getServicePrice WRITE setServicePrice USER true)
	Q_PROPERTY(qint32 currencyType READ getCurrencyType WRITE setCurrencyType USER true)
	Q_PROPERTY(QDate dt READ getDt WRITE setDt USER true)
	Q_PROPERTY(QTime tm READ getTm WRITE setTm USER true)
	Q_PROPERTY(bool autoConfirmed READ getAutoConfirmed WRITE setAutoConfirmed USER true)
	Q_PROPERTY(qint32 status READ getStatus WRITE setStatus USER true)
	Q_PROPERTY(bool clientsMayCancel READ getClientsMayCancel WRITE setClientsMayCancel USER true)
	Q_PROPERTY(qint32 minimumCancelTime READ getMinimumCancelTime WRITE setMinimumCancelTime USER true)

public:
	Q_INVOKABLE EUserScheduleConfirmation(QObject *parent=0);
	~EUserScheduleConfirmation(){}
	static QMetaObject getMeta();
	Q_INVOKABLE EUserScheduleConfirmation(const EUserScheduleConfirmation &d) : QObject () { setData(d); }
	Q_INVOKABLE EUserScheduleConfirmation &operator=(const EUserScheduleConfirmation &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const EUserScheduleConfirmation &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const EUserScheduleConfirmation &other) const{ if(equal(other))return false;return true;}
	inline qint64 getServiceID() const {return serviceID;}
	void setServiceID(qint64 d){serviceID=d;}
	Q_INVOKABLE QString getServiceName() const {return serviceName;}
	void setServiceName(const QString &d){serviceName=d;}
	inline qint64 getProfessionalUserID() const {return professionalUserID;}
	void setProfessionalUserID(qint64 d){professionalUserID=d;}
	Q_INVOKABLE QString getProfessionalUserName() const {return professionalUserName;}
	void setProfessionalUserName(const QString &d){professionalUserName=d;}
	Q_INVOKABLE QString getProfessionalAddress() const {return professionalAddress;}
	void setProfessionalAddress(const QString &d){professionalAddress=d;}
	Q_INVOKABLE QString getProfessionalPhone() const {return professionalPhone;}
	void setProfessionalPhone(const QString &d){professionalPhone=d;}
	inline double getServicePrice() const {return servicePrice;}
	void setServicePrice(double d){servicePrice=d;}
	inline qint32 getCurrencyType() const {return currencyType;}
	void setCurrencyType(qint32 d){currencyType=d;}
	Q_INVOKABLE QDate getDt() const {return dt;}
	void setDt(const QDate &d){dt=d;}
	Q_INVOKABLE QTime getTm() const {return tm;}
	void setTm(const QTime &d){tm=d;}
	inline bool getAutoConfirmed() const {return autoConfirmed;}
	void setAutoConfirmed(bool d){autoConfirmed=d;}
	inline qint32 getStatus() const {return status;}
	void setStatus(qint32 d){status=d;}
	inline bool getClientsMayCancel() const {return clientsMayCancel;}
	void setClientsMayCancel(bool d){clientsMayCancel=d;}
	inline qint32 getMinimumCancelTime() const {return minimumCancelTime;}
	void setMinimumCancelTime(qint32 d){minimumCancelTime=d;}

protected:
	EUserScheduleConfirmation &setData(const EUserScheduleConfirmation &d){
		serviceID=d.serviceID;
		serviceName=d.serviceName;
		professionalUserID=d.professionalUserID;
		professionalUserName=d.professionalUserName;
		professionalAddress=d.professionalAddress;
		professionalPhone=d.professionalPhone;
		servicePrice=d.servicePrice;
		currencyType=d.currencyType;
		dt=d.dt;
		tm=d.tm;
		autoConfirmed=d.autoConfirmed;
		status=d.status;
		clientsMayCancel=d.clientsMayCancel;
		minimumCancelTime=d.minimumCancelTime;
		return *this;
	}
	bool equal(const EUserScheduleConfirmation &other) const {
		if(serviceID!=other.serviceID)return false;
		if(serviceName!=other.serviceName)return false;
		if(professionalUserID!=other.professionalUserID)return false;
		if(professionalUserName!=other.professionalUserName)return false;
		if(professionalAddress!=other.professionalAddress)return false;
		if(professionalPhone!=other.professionalPhone)return false;
		if(servicePrice!=other.servicePrice)return false;
		if(currencyType!=other.currencyType)return false;
		if(dt!=other.dt)return false;
		if(tm!=other.tm)return false;
		if(autoConfirmed!=other.autoConfirmed)return false;
		if(status!=other.status)return false;
		if(clientsMayCancel!=other.clientsMayCancel)return false;
		if(minimumCancelTime!=other.minimumCancelTime)return false;
		return true;
	}
	qint64 serviceID;
	QString serviceName;
	qint64 professionalUserID;
	QString professionalUserName;
	QString professionalAddress;
	QString professionalPhone;
	double servicePrice;
	qint32 currencyType;
	QDate dt;
	QTime tm;
	bool autoConfirmed;
	qint32 status;
	bool clientsMayCancel;
	qint32 minimumCancelTime;
};

Q_DECLARE_METATYPE(EUserScheduleConfirmation)
Q_DECLARE_METATYPE(EUserScheduleConfirmation*)
Q_DECLARE_METATYPE(QList<EUserScheduleConfirmation*>)
Q_DECLARE_METATYPE(QList<EUserScheduleConfirmation>)
#endif
